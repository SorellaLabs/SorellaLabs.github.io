(function() {var type_impls = {
"libffi":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CType-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/libffi/high/types.rs.html#79\">source</a><a href=\"#impl-CType-for-i64\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"libffi/high/types/trait.CType.html\" title=\"trait libffi::high::types::CType\">CType</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.reify\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libffi/high/types.rs.html#79\">source</a><a href=\"#method.reify\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"libffi/high/types/trait.CType.html#tymethod.reify\" class=\"fn\">reify</a>() -&gt; <a class=\"struct\" href=\"libffi/high/types/struct.Type.html\" title=\"struct libffi::high::types::Type\">Type</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Creates or retrieves a <code>Type&lt;T&gt;</code> for any type <code>T: CType</code>. <a href=\"libffi/high/types/trait.CType.html#tymethod.reify\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.RetType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RetType\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"libffi/high/types/trait.CType.html#associatedtype.RetType\" class=\"associatedtype\">RetType</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>The low-level libffi library implicitly extends small integer\nreturn values to <code>ffi_arg</code> or <code>ffi_sarg</code>.  Track the possibly\nextended variant of <code>T</code> as an associated type here.</div></details></div></details>","CType","libffi::low::ffi_sarg"]],
"serde":[]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()