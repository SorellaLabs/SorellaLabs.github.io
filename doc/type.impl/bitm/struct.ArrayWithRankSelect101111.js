(function() {var type_impls = {
"bitm":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#126-167\">source</a><a href=\"#impl-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"bitm/trait.SelectForRank101111.html\" title=\"trait bitm::SelectForRank101111\">SelectForRank101111</a>, S0: <a class=\"trait\" href=\"bitm/trait.Select0ForRank101111.html\" title=\"trait bitm::Select0ForRank101111\">Select0ForRank101111</a>&gt; <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.build\" class=\"method\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#127-166\">source</a><h4 class=\"code-header\">pub fn <a href=\"bitm/struct.ArrayWithRankSelect101111.html#tymethod.build\" class=\"fn\">build</a>(content: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>]&gt;) -&gt; (Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></div></details>",0,"bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Select-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#85-89\">source</a><a href=\"#impl-Select-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"bitm/trait.SelectForRank101111.html\" title=\"trait bitm::SelectForRank101111\">SelectForRank101111</a>, S0&gt; <a class=\"trait\" href=\"bitm/trait.Select.html\" title=\"trait bitm::Select\">Select</a> for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_select\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#86-88\">source</a><a href=\"#method.try_select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Select.html#tymethod.try_select\" class=\"fn\">try_select</a>(&amp;self, rank: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the position of the <code>rank</code>-th one (counting from 0) in <code>self</code> or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if there are no such many ones in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/select.rs.html#24-26\">source</a><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Select.html#method.select\" class=\"fn\">select</a>(&amp;self, rank: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the position of the <code>rank</code>-th one (counting from 0) in <code>self</code> or panics if there are no such many ones in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/select.rs.html#30-32\">source</a><a href=\"#method.select_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"bitm/trait.Select.html#method.select_unchecked\" class=\"fn\">select_unchecked</a>(&amp;self, rank: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the position of the <code>rank</code>-th one (counting from 0) in <code>self</code>.\nThe result is undefined if there are no such many ones in <code>self</code>.</div></details></div></details>","Select","bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetSize-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#74-79\">source</a><a href=\"#impl-GetSize-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"dyn_size_of/trait.GetSize.html\" title=\"trait dyn_size_of::GetSize\">GetSize</a>, S0: <a class=\"trait\" href=\"dyn_size_of/trait.GetSize.html\" title=\"trait dyn_size_of::GetSize\">GetSize</a>&gt; <a class=\"trait\" href=\"dyn_size_of/trait.GetSize.html\" title=\"trait dyn_size_of::GetSize\">GetSize</a> for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_bytes_dyn\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#75-77\">source</a><a href=\"#method.size_bytes_dyn\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dyn_size_of/trait.GetSize.html#method.size_bytes_dyn\" class=\"fn\">size_bytes_dyn</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns approximate number of bytes occupied by dynamic (heap) part of <code>self</code>.\nSame as <code>self.size_bytes() - std::mem::size_of_val(self)</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.USES_DYN_MEM\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#78\">source</a><a href=\"#associatedconstant.USES_DYN_MEM\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"dyn_size_of/trait.GetSize.html#associatedconstant.USES_DYN_MEM\" class=\"constant\">USES_DYN_MEM</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'><code>true</code> if and only if the variables of this type can use dynamic (heap) memory.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_bytes_content_dyn\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dyn_size_of/lib.rs.html#16\">source</a><a href=\"#method.size_bytes_content_dyn\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dyn_size_of/trait.GetSize.html#method.size_bytes_content_dyn\" class=\"fn\">size_bytes_content_dyn</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns approximate number of bytes occupied by dynamic (heap) part of <code>self</code> content.\nIt usually equals to <code>size_bytes_dyn()</code>.\nHowever, sometimes it is smaller by the amount of memory reserved but not yet used\n(e.g., <code>size_bytes_content_dyn()</code> only takes into account the length of the vector and not its capacity).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dyn_size_of/lib.rs.html#19\">source</a><a href=\"#method.size_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dyn_size_of/trait.GetSize.html#method.size_bytes\" class=\"fn\">size_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns approximate, total (including heap memory) number of bytes occupied by <code>self</code>.</div></details></div></details>","GetSize","bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rank-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#97-124\">source</a><a href=\"#impl-Rank-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"bitm/trait.SelectForRank101111.html\" title=\"trait bitm::SelectForRank101111\">SelectForRank101111</a>, S0: <a class=\"trait\" href=\"bitm/trait.Select0ForRank101111.html\" title=\"trait bitm::Select0ForRank101111\">Select0ForRank101111</a>&gt; <a class=\"trait\" href=\"bitm/trait.Rank.html\" title=\"trait bitm::Rank\">Rank</a> for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_rank\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#98-109\">source</a><a href=\"#method.try_rank\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Rank.html#tymethod.try_rank\" class=\"fn\">try_rank</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of ones in first <code>index</code> bits or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>index</code> is out of bound.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rank\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#111-123\">source</a><a href=\"#method.rank\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Rank.html#method.rank\" class=\"fn\">rank</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of ones in first <code>index</code> bits or panics if <code>index</code> is out of bound.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rank_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#22-24\">source</a><a href=\"#method.rank_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"bitm/trait.Rank.html#method.rank_unchecked\" class=\"fn\">rank_unchecked</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of ones in first <code>index</code> bits.\nThe result is undefined if <code>index</code> is out of bound.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_rank0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#27-29\">source</a><a href=\"#method.try_rank0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Rank.html#method.try_rank0\" class=\"fn\">try_rank0</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the number of zeros in first <code>index</code> bits or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>index</code> is out of bound.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rank0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#32\">source</a><a href=\"#method.rank0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Rank.html#method.rank0\" class=\"fn\">rank0</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of zeros in first <code>index</code> bits or panics if <code>index</code> is out of bound.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rank0_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#36-38\">source</a><a href=\"#method.rank0_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"bitm/trait.Rank.html#method.rank0_unchecked\" class=\"fn\">rank0_unchecked</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of ones in first <code>index</code> bits.\nThe result is undefined if <code>index</code> is out of bound.</div></details></div></details>","Rank","bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Select0-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#91-95\">source</a><a href=\"#impl-Select0-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, S0: <a class=\"trait\" href=\"bitm/trait.Select0ForRank101111.html\" title=\"trait bitm::Select0ForRank101111\">Select0ForRank101111</a>&gt; <a class=\"trait\" href=\"bitm/trait.Select0.html\" title=\"trait bitm::Select0\">Select0</a> for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_select0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#92-94\">source</a><a href=\"#method.try_select0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Select0.html#tymethod.try_select0\" class=\"fn\">try_select0</a>(&amp;self, rank: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the position of the <code>rank</code>-th zero (counting from 0) in <code>self</code> or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if there are no such many zeros in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/select.rs.html#42-44\">source</a><a href=\"#method.select0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"bitm/trait.Select0.html#method.select0\" class=\"fn\">select0</a>(&amp;self, rank: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the position of the <code>rank</code>-th zero (counting from 0) in <code>self</code> or panics if there are no such many zeros in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select0_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/select.rs.html#48-50\">source</a><a href=\"#method.select0_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"bitm/trait.Select0.html#method.select0_unchecked\" class=\"fn\">select0_unchecked</a>(&amp;self, rank: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the position of the <code>rank</code>-th zero (counting from 0) in <code>self</code>.\nThe result is undefined if there are no such many zeros in <code>self</code>.</div></details></div></details>","Select0","bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5Bu64%5D%3E%3E-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#81-83\">source</a><a href=\"#impl-From%3CBox%3C%5Bu64%5D%3E%3E-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"bitm/trait.SelectForRank101111.html\" title=\"trait bitm::SelectForRank101111\">SelectForRank101111</a>, S0: <a class=\"trait\" href=\"bitm/trait.Select0ForRank101111.html\" title=\"trait bitm::Select0ForRank101111\">Select0ForRank101111</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>]&gt;&gt; for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#82\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>]&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Box<[u64]>>","bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu64%5D%3E-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#169-171\">source</a><a href=\"#impl-AsRef%3C%5Bu64%5D%3E-for-ArrayWithRankSelect101111%3CS,+S0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"bitm/trait.SelectForRank101111.html\" title=\"trait bitm::SelectForRank101111\">SelectForRank101111</a>, S0: <a class=\"trait\" href=\"bitm/trait.Select0ForRank101111.html\" title=\"trait bitm::Select0ForRank101111\">Select0ForRank101111</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>]&gt; for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;S, S0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#170\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u64]>","bitm::rank_select::ArrayWithRank101111"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ArrayWithRankSelect101111%3CSelect,+Select0%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#65\">source</a><a href=\"#impl-Clone-for-ArrayWithRankSelect101111%3CSelect,+Select0%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Select: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Select0: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;Select, Select0&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bitm/rank_select/mod.rs.html#65\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bitm/struct.ArrayWithRankSelect101111.html\" title=\"struct bitm::ArrayWithRankSelect101111\">ArrayWithRankSelect101111</a>&lt;Select, Select0&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","bitm::rank_select::ArrayWithRank101111"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()