(function() {var type_impls = {
"reth_stages":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnboundedSender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#359\">source</a><a href=\"#impl-UnboundedSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedSender\">UnboundedSender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#376\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html#tymethod.send\" class=\"fn\">send</a>(&amp;self, message: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"tokio/sync/mpsc/error/struct.SendError.html\" title=\"struct tokio::sync::mpsc::error::SendError\">SendError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to send a message on this <code>UnboundedSender</code> without blocking.</p>\n<p>This method is not marked async because sending a message to an unbounded channel\nnever requires any form of waiting. Because of this, the <code>send</code> method can be\nused in both synchronous and asynchronous code without problems.</p>\n<p>If the receive half of the channel is closed, either due to <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedReceiver.html#method.close\" title=\"method tokio::sync::mpsc::unbounded::UnboundedReceiver::close\"><code>close</code></a>\nbeing called or the <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedReceiver.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedReceiver\"><code>UnboundedReceiver</code></a> having been dropped, this\nfunction returns an error. The error includes the value passed to <code>send</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.closed\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#452\">source</a><h4 class=\"code-header\">pub async fn <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html#tymethod.closed\" class=\"fn\">closed</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Completes when the receiver has dropped.</p>\n<p>This allows the producers to get notified when interest in the produced\nvalues is canceled and immediately stop doing work.</p>\n<h5 id=\"cancel-safety\"><a href=\"#cancel-safety\">Cancel safety</a></h5>\n<p>This method is cancel safe. Once the channel is closed, it stays closed\nforever and all future calls to <code>closed</code> will return immediately.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::mpsc;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx1, rx) = mpsc::unbounded_channel::&lt;()&gt;();\n    <span class=\"kw\">let </span>tx2 = tx1.clone();\n    <span class=\"kw\">let </span>tx3 = tx1.clone();\n    <span class=\"kw\">let </span>tx4 = tx1.clone();\n    <span class=\"kw\">let </span>tx5 = tx1.clone();\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        drop(rx);\n    });\n\n    <span class=\"macro\">futures::join!</span>(\n        tx1.closed(),\n        tx2.closed(),\n        tx3.closed(),\n        tx4.closed(),\n        tx5.closed()\n    );\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_closed\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#474\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html#tymethod.is_closed\" class=\"fn\">is_closed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the channel has been closed. This happens when the\n<a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedReceiver.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedReceiver\"><code>UnboundedReceiver</code></a> is dropped, or when the\n<a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedReceiver.html#method.close\" title=\"method tokio::sync::mpsc::unbounded::UnboundedReceiver::close\"><code>UnboundedReceiver::close</code></a> method is called.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>(tx, rx) = tokio::sync::mpsc::unbounded_channel::&lt;()&gt;();\n<span class=\"macro\">assert!</span>(!tx.is_closed());\n\n<span class=\"kw\">let </span>tx2 = tx.clone();\n<span class=\"macro\">assert!</span>(!tx2.is_closed());\n\ndrop(rx);\n<span class=\"macro\">assert!</span>(tx.is_closed());\n<span class=\"macro\">assert!</span>(tx2.is_closed());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_channel\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#490\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html#tymethod.same_channel\" class=\"fn\">same_channel</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedSender\">UnboundedSender</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if senders belong to the same channel.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>(tx, rx) = tokio::sync::mpsc::unbounded_channel::&lt;()&gt;();\n<span class=\"kw\">let  </span>tx2 = tx.clone();\n<span class=\"macro\">assert!</span>(tx.same_channel(<span class=\"kw-2\">&amp;</span>tx2));\n\n<span class=\"kw\">let </span>(tx3, rx3) = tokio::sync::mpsc::unbounded_channel::&lt;()&gt;();\n<span class=\"macro\">assert!</span>(!tx3.same_channel(<span class=\"kw-2\">&amp;</span>tx2));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#498\">source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tokio/sync/mpsc/unbounded/struct.WeakUnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::WeakUnboundedSender\">WeakUnboundedSender</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the <code>UnboundedSender</code> to a <a href=\"tokio/sync/mpsc/unbounded/struct.WeakUnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::WeakUnboundedSender\"><code>WeakUnboundedSender</code></a> that does not count\ntowards RAII semantics, i.e. if all <code>UnboundedSender</code> instances of the\nchannel were dropped and only <code>WeakUnboundedSender</code> instances remain,\nthe channel is closed.</p>\n</div></details></div></details>",0,"reth_stages::metrics::listener::MetricEventsSender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-UnboundedSender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#49\">source</a><a href=\"#impl-Clone-for-UnboundedSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedSender\">UnboundedSender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#50\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedSender\">UnboundedSender</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","reth_stages::metrics::listener::MetricEventsSender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-UnboundedSender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#57\">source</a><a href=\"#impl-Debug-for-UnboundedSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/sync/mpsc/unbounded/struct.UnboundedSender.html\" title=\"struct tokio::sync::mpsc::unbounded::UnboundedSender\">UnboundedSender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/mpsc/unbounded.rs.html#58\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","reth_stages::metrics::listener::MetricEventsSender"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()