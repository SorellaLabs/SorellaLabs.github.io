(function() {var type_impls = {
"boa_engine":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","boa_engine::object::JsPrototype"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","boa_engine::object::JsPrototype"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","boa_engine::object::JsPrototype"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Trace-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#326\">source</a><a href=\"#impl-Trace-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"boa_gc/trace/trait.Trace.html\" title=\"trait boa_gc::trace::Trace\">Trace</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"boa_gc/trace/trait.Trace.html\" title=\"trait boa_gc::trace::Trace\">Trace</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#327-331\">source</a><a href=\"#method.trace\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"boa_gc/trace/trait.Trace.html#tymethod.trace\" class=\"fn\">trace</a>(&amp;self)</h4></section></summary><div class='docblock'>Marks all contained <code>Gc</code>s. <a href=\"boa_gc/trace/trait.Trace.html#tymethod.trace\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#327-331\">source</a><a href=\"#method.root\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"boa_gc/trace/trait.Trace.html#tymethod.root\" class=\"fn\">root</a>(&amp;self)</h4></section></summary><div class='docblock'>Increments the root-count of all contained <code>Gc</code>s. <a href=\"boa_gc/trace/trait.Trace.html#tymethod.root\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unroot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#327-331\">source</a><a href=\"#method.unroot\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"boa_gc/trace/trait.Trace.html#tymethod.unroot\" class=\"fn\">unroot</a>(&amp;self)</h4></section></summary><div class='docblock'>Decrements the root-count of all contained <code>Gc</code>s. <a href=\"boa_gc/trace/trait.Trace.html#tymethod.unroot\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_finalizer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#327-331\">source</a><a href=\"#method.run_finalizer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"boa_gc/trace/trait.Trace.html#tymethod.run_finalizer\" class=\"fn\">run_finalizer</a>(&amp;self)</h4></section></summary><div class='docblock'>Runs <a href=\"boa_gc/trace/trait.Finalize.html#method.finalize\" title=\"method boa_gc::trace::Finalize::finalize\"><code>Finalize::finalize</code></a> on this object and all\ncontained subobjects.</div></details></div></details>","Trace","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Finalize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#324\">source</a><a href=\"#impl-Finalize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"boa_gc/trace/trait.Finalize.html\" title=\"trait boa_gc::trace::Finalize\">Finalize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"boa_gc/trace/trait.Trace.html\" title=\"trait boa_gc::trace::Trace\">Trace</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.finalize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/boa_gc/trace.rs.html#22\">source</a><a href=\"#method.finalize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"boa_gc/trace/trait.Finalize.html#method.finalize\" class=\"fn\">finalize</a>(&amp;self)</h4></section></summary><div class='docblock'>Cleanup logic for a type.</div></details></div></details>","Finalize","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#99-101\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#104-106\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#829-831\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#833-835\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arbitrary%3C'a%3E-for-Option%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#530\">source</a><a href=\"#impl-Arbitrary%3C'a%3E-for-Option%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A&gt; <a class=\"trait\" href=\"arbitrary/trait.Arbitrary.html\" title=\"trait arbitrary::Arbitrary\">Arbitrary</a>&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"arbitrary/trait.Arbitrary.html\" title=\"trait arbitrary::Arbitrary\">Arbitrary</a>&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#531\">source</a><a href=\"#method.arbitrary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arbitrary/trait.Arbitrary.html#tymethod.arbitrary\" class=\"fn\">arbitrary</a>(u: &amp;mut <a class=\"struct\" href=\"arbitrary/unstructured/struct.Unstructured.html\" title=\"struct arbitrary::unstructured::Unstructured\">Unstructured</a>&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;, <a class=\"enum\" href=\"arbitrary/error/enum.Error.html\" title=\"enum arbitrary::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Generate an arbitrary value of <code>Self</code> from the given unstructured data. <a href=\"arbitrary/trait.Arbitrary.html#tymethod.arbitrary\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#540\">source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arbitrary/trait.Arbitrary.html#method.size_hint\" class=\"fn\">size_hint</a>(depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Get a size hint for how many bytes out of an <code>Unstructured</code> this type\nneeds to construct itself. <a href=\"arbitrary/trait.Arbitrary.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary_take_rest\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#189\">source</a><a href=\"#method.arbitrary_take_rest\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arbitrary/trait.Arbitrary.html#method.arbitrary_take_rest\" class=\"fn\">arbitrary_take_rest</a>(u: <a class=\"struct\" href=\"arbitrary/unstructured/struct.Unstructured.html\" title=\"struct arbitrary::unstructured::Unstructured\">Unstructured</a>&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"arbitrary/error/enum.Error.html\" title=\"enum arbitrary::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Generate an arbitrary value of <code>Self</code> from the entirety of the given\nunstructured data. <a href=\"arbitrary/trait.Arbitrary.html#method.arbitrary_take_rest\">Read more</a></div></details></div></details>","Arbitrary<'a>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsULE-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#99\">source</a><a href=\"#impl-AsULE-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.ULE\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ULE\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" class=\"associatedtype\">ULE</a> = <a class=\"struct\" href=\"zerovec/ule/option/struct.OptionULE.html\" title=\"struct zerovec::ule::option::OptionULE\">OptionULE</a>&lt;&lt;T as <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>&gt;</h4></section></summary><div class='docblock'>The ULE type corresponding to <code>Self</code>. <a href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_unaligned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#101\">source</a><a href=\"#method.to_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.AsULE.html#tymethod.to_unaligned\" class=\"fn\">to_unaligned</a>(self) -&gt; <a class=\"struct\" href=\"zerovec/ule/option/struct.OptionULE.html\" title=\"struct zerovec::ule::option::OptionULE\">OptionULE</a>&lt;&lt;T as <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>&gt;</h4></section></summary><div class='docblock'>Converts from <code>Self</code> to <code>Self::ULE</code>. <a href=\"zerovec/ule/trait.AsULE.html#tymethod.to_unaligned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unaligned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#105\">source</a><a href=\"#method.from_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/trait.AsULE.html#tymethod.from_unaligned\" class=\"fn\">from_unaligned</a>(other: <a class=\"struct\" href=\"zerovec/ule/option/struct.OptionULE.html\" title=\"struct zerovec::ule::option::OptionULE\">OptionULE</a>&lt;&lt;T as <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts from <code>Self::ULE</code> to <code>Self</code>. <a href=\"zerovec/ule/trait.AsULE.html#tymethod.from_unaligned\">Read more</a></div></details></div></details>","AsULE","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroMapKV%3C'a%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/map/kv.rs.html#76-78\">source</a><a href=\"#impl-ZeroMapKV%3C'a%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"zerovec/map/kv/trait.ZeroMapKV.html\" title=\"trait zerovec::map::kv::ZeroMapKV\">ZeroMapKV</a>&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;: <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Container\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Container\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.Container\" class=\"associatedtype\">Container</a> = <a class=\"struct\" href=\"zerovec/zerovec/struct.ZeroVec.html\" title=\"struct zerovec::zerovec::ZeroVec\">ZeroVec</a>&lt;'a, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The container that can be used with this type: <a href=\"zerovec/zerovec/struct.ZeroVec.html\" title=\"struct zerovec::zerovec::ZeroVec\"><code>ZeroVec</code></a> or <a href=\"zerovec/varzerovec/vec/enum.VarZeroVec.html\" title=\"enum zerovec::varzerovec::vec::VarZeroVec\"><code>VarZeroVec</code></a>.</div></details><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.Slice\" class=\"associatedtype\">Slice</a> = <a class=\"struct\" href=\"zerovec/zerovec/slice/struct.ZeroSlice.html\" title=\"struct zerovec::zerovec::slice::ZeroSlice\">ZeroSlice</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.GetType\" class=\"associatedtype\">GetType</a> = &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"zerovec/ule/trait.AsULE.html\" title=\"trait zerovec::ule::AsULE\">AsULE</a>&gt;::<a class=\"associatedtype\" href=\"zerovec/ule/trait.AsULE.html#associatedtype.ULE\" title=\"type zerovec::ule::AsULE::ULE\">ULE</a></h4></section></summary><div class='docblock'>The type produced by <code>Container::get()</code> <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.GetType\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.OwnedType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.OwnedType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.OwnedType\" class=\"associatedtype\">OwnedType</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The type produced by <code>Container::replace()</code> and <code>Container::remove()</code>,\nalso used during deserialization. If <code>Self</code> is human readable serialized,\ndeserializing to <code>Self::OwnedType</code> should produce the same value once\npassed through <code>Self::owned_as_self()</code> <a href=\"zerovec/map/kv/trait.ZeroMapKV.html#associatedtype.OwnedType\">Read more</a></div></details></div></details>","ZeroMapKV<'a>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3COptionVarULE%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#206-209\">source</a><a href=\"#impl-EncodeAsVarULE%3COptionVarULE%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;<a class=\"struct\" href=\"zerovec/ule/option/struct.OptionVarULE.html\" title=\"struct zerovec::ule::option::OptionVarULE\">OptionVarULE</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html\" title=\"trait zerovec::ule::encode::EncodeAsVarULE\">EncodeAsVarULE</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\">VarULE</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#211\">source</a><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\" class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#tymethod.encode_var_ule_as_slices\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#217\">source</a><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerovec/ule/option.rs.html#228\">source</a><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_write\" class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding <a href=\"zerovec/ule/trait.VarULE.html\" title=\"trait zerovec::ule::VarULE\"><code>VarULE</code></a> type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of <a href=\"zerovec/ule/encode/trait.EncodeAsVarULE.html#method.encode_var_ule_len\" title=\"method zerovec::ule::encode::EncodeAsVarULE::encode_var_ule_len::encode_var_ule_len\"><code>Self::encode_var_ule_len()</code></a></div></details></div></details>","EncodeAsVarULE<OptionVarULE<U>>","boa_engine::object::JsPrototype"],["<section id=\"impl-CloneableCart-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/yoke/yoke.rs.html#526\">source</a><a href=\"#impl-CloneableCart-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"yoke/yoke/trait.CloneableCart.html\" title=\"trait yoke::yoke::CloneableCart\">CloneableCart</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"yoke/yoke/trait.CloneableCart.html\" title=\"trait yoke::yoke::CloneableCart\">CloneableCart</a>,</div></h3></section>","CloneableCart","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/yoke/macro_impls.rs.html#93\">source</a><a href=\"#impl-Yokeable%3C'a%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'b&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/macro_impls.rs.html#95\">source</a><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform\" class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/macro_impls.rs.html#95\">source</a><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_owned\" class=\"fn\">transform_owned</a>(self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/macro_impls.rs.html#95\">source</a><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.make\" class=\"fn\">make</a>(from: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.make\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/yoke/macro_impls.rs.html#95\">source</a><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_mut\" class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"yoke/yokeable/trait.Yokeable.html\" title=\"trait yoke::yokeable::Yokeable\">Yokeable</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"yoke/yokeable/trait.Yokeable.html#associatedtype.Output\" title=\"type yoke::yokeable::Yokeable::Output\">Output</a>),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a href=\"yoke/yokeable/trait.Yokeable.html#tymethod.transform_mut\">Read more</a></div></details></div></details>","Yokeable<'a>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'zf,+Option%3CC%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerofrom/zero_from.rs.html#96\">source</a><a href=\"#impl-ZeroFrom%3C'zf,+Option%3CC%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'zf, C, T&gt; <a class=\"trait\" href=\"zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"zerofrom/zero_from/trait.ZeroFrom.html\" title=\"trait zerofrom::zero_from::ZeroFrom\">ZeroFrom</a>&lt;'zf, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerofrom/zero_from.rs.html#97\">source</a><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zerofrom/zero_from/trait.ZeroFrom.html#tymethod.zero_from\" class=\"fn\">zero_from</a>(other: &amp;'zf <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'zf, Option<C>>","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TapOptional-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#417\">source</a><a href=\"#impl-TapOptional-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"tap/tap/trait.TapOptional.html\" title=\"trait tap::tap::TapOptional\">TapOptional</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Val\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Val\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"tap/tap/trait.TapOptional.html#associatedtype.Val\" class=\"associatedtype\">Val</a> = T</h4></section></summary><div class='docblock'>The interior type that the container may or may not carry.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#421\">source</a><a href=\"#method.tap_some\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some\" class=\"fn\">tap_some</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Immutabily accesses an interior value only when it is present. <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#429\">source</a><a href=\"#method.tap_some_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some_mut\" class=\"fn\">tap_some_mut</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Mutably accesses an interor value only when it is present. <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_none\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#437\">source</a><a href=\"#method.tap_none\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_none\" class=\"fn\">tap_none</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>()) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Runs an effect function when the container is empty. <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_none\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some_dbg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#386\">source</a><a href=\"#method.tap_some_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#method.tap_some_dbg\" class=\"fn\">tap_some_dbg</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;Self::<a class=\"associatedtype\" href=\"tap/tap/trait.TapOptional.html#associatedtype.Val\" title=\"type tap::tap::TapOptional::Val\">Val</a>)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_some()</code> only in debug builds, and is erased in release\nbuilds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some_mut_dbg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#397\">source</a><a href=\"#method.tap_some_mut_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#method.tap_some_mut_dbg\" class=\"fn\">tap_some_mut_dbg</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut Self::<a class=\"associatedtype\" href=\"tap/tap/trait.TapOptional.html#associatedtype.Val\" title=\"type tap::tap::TapOptional::Val\">Val</a>)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_some_mut()</code> only in debug builds, and is erased in release\nbuilds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_none_dbg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#408\">source</a><a href=\"#method.tap_none_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#method.tap_none_dbg\" class=\"fn\">tap_none_dbg</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>()) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_none()</code> only in debug builds, and is erased in release\nbuilds.</div></details></div></details>","TapOptional","boa_engine::object::JsPrototype"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFromJs-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/boa_engine/value/conversions/try_from_js.rs.html#49-59\">source</a><a href=\"#impl-TryFromJs-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"boa_engine/value/trait.TryFromJs.html\" title=\"trait boa_engine::value::TryFromJs\">TryFromJs</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"boa_engine/value/trait.TryFromJs.html\" title=\"trait boa_engine::value::TryFromJs\">TryFromJs</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_js\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/boa_engine/value/conversions/try_from_js.rs.html#53-58\">source</a><a href=\"#method.try_from_js\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"boa_engine/value/trait.TryFromJs.html#tymethod.try_from_js\" class=\"fn\">try_from_js</a>(value: &amp;<a class=\"enum\" href=\"boa_engine/enum.JsValue.html\" title=\"enum boa_engine::JsValue\">JsValue</a>, context: &amp;mut <a class=\"struct\" href=\"boa_engine/struct.Context.html\" title=\"struct boa_engine::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"boa_engine/type.JsResult.html\" title=\"type boa_engine::JsResult\">JsResult</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>This function tries to convert a JavaScript value into <code>Self</code>.</div></details></div></details>","TryFromJs","boa_engine::object::JsPrototype"]],
"brotli_decompressor":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","brotli_decompressor::ffi::interface::brotli_alloc_func","brotli_decompressor::ffi::interface::brotli_free_func"]],
"core_foundation_sys":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","core_foundation_sys::messageport::CFMessagePortCallBack","core_foundation_sys::messageport::CFMessagePortInvalidationCallBack"]],
"form_urlencoded":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3C%26T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1840\">source</a><a href=\"#impl-Option%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0, const unstable\">1.35.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1856-1858\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.copied\" class=\"fn\">copied</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents of the\noption.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>copied = opt_x.copied();\n<span class=\"macro\">assert_eq!</span>(copied, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1882-1884\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.cloned\" class=\"fn\">cloned</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents of the\noption.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>cloned = opt_x.cloned();\n<span class=\"macro\">assert_eq!</span>(cloned, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details></div></details>",0,"form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","form_urlencoded::EncodingOverride"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","form_urlencoded::EncodingOverride"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","form_urlencoded::EncodingOverride"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2094\">source</a></span><a href=\"#impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2115\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(o: &amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Converts an <code><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> into an <code><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, preserving\nthe original. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value, consuming the original,\nso this technique uses <code>from</code> to first take an <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> to a reference\nto the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, Rustaceans!\"</span>));\n<span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = Option::from(<span class=\"kw-2\">&amp;</span>s).map(|ss: <span class=\"kw-2\">&amp;</span>String| ss.len());\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Can still print s: {s:?}\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(o, <span class=\"prelude-val\">Some</span>(<span class=\"number\">18</span>));</code></pre></div>\n</div></details></div></details>","From<&'a Option<T>>","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","form_urlencoded::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","form_urlencoded::EncodingOverride"]],
"lexical_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","lexical_core::format::OptionU8","lexical_core::write_float_options::OptionUsize","lexical_core::write_float_options::OptionI32"]],
"lexical_parse_float":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","lexical_parse_float::format::OptionU8"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","lexical_parse_float::format::OptionU8"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","lexical_parse_float::format::OptionU8"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","lexical_parse_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","lexical_parse_float::format::OptionU8"]],
"lexical_parse_integer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","lexical_parse_integer::format::OptionU8"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","lexical_parse_integer::format::OptionU8"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","lexical_parse_integer::format::OptionU8"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","lexical_parse_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","lexical_parse_integer::format::OptionU8"]],
"lexical_util":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","lexical_util::format_builder::OptionU8"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","lexical_util::format_builder::OptionU8"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","lexical_util::format_builder::OptionU8"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","lexical_util::format_builder::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","lexical_util::format_builder::OptionU8"]],
"lexical_write_float":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","lexical_write_float::options::OptionUsize","lexical_write_float::options::OptionI32","lexical_write_float::format::OptionU8"]],
"lexical_write_integer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","lexical_write_integer::format::OptionU8"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","lexical_write_integer::format::OptionU8"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","lexical_write_integer::format::OptionU8"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","lexical_write_integer::format::OptionU8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","lexical_write_integer::format::OptionU8"]],
"libc":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","libc::unix::bsd::apple::pthread_jit_write_callback_t","libc::unix::bsd::apple::copyfile_callback_t"]],
"reth_db":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/82901\">#82901</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/98934\">#98934</a>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/70086\">#70086</a>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CResult%3CT,+E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1944\">source</a><a href=\"#impl-Option%3CResult%3CT,+E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1964\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.transpose\" class=\"fn\">transpose</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transposes an <code>Option</code> of a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result</code></a> of an <code>Option</code>.</p>\n<p><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> will be mapped to <code><a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\">Ok</a>(<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\">None</a>)</code>.\n<code><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\">Some</a>(<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\">Ok</a>(_))</code> and <code><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\">Some</a>(<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\">Err</a>(_))</code> will be mapped to\n<code><a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\">Ok</a>(<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\">Some</a>(_))</code> and <code><a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\">Err</a>(_)</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Debug, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>SomeErr;\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;i32&gt;, SomeErr&gt; = <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;i32, SomeErr&gt;&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(x, y.transpose());</code></pre></div>\n</div></details></div></details>",0,"reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","reth_db::abstraction::common::IterPairResult"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","reth_db::abstraction::common::IterPairResult"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","reth_db::abstraction::common::IterPairResult"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#99-101\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/ser/impls.rs.html#104-106\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#829-831\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde/de/impls.rs.html#833-835\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ContextCompat%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/eyre/context.rs.html#81\">source</a><a href=\"#impl-ContextCompat%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"eyre/trait.ContextCompat.html\" title=\"trait eyre::ContextCompat\">ContextCompat</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_err\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/eyre/context.rs.html#82-84\">source</a><a href=\"#method.wrap_err\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"eyre/trait.ContextCompat.html#tymethod.wrap_err\" class=\"fn\">wrap_err</a>&lt;D&gt;(self, msg: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"eyre/struct.Report.html\" title=\"struct eyre::Report\">Report</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Compatibility re-export of <code>context</code> for porting from <code>anyhow</code> to <code>eyre</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrap_err_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/eyre/context.rs.html#89-92\">source</a><a href=\"#method.wrap_err_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"eyre/trait.ContextCompat.html#tymethod.wrap_err_with\" class=\"fn\">wrap_err_with</a>&lt;D, F&gt;(self, msg: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"eyre/struct.Report.html\" title=\"struct eyre::Report\">Report</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; D,</div></h4></section></summary><div class='docblock'>Compatibility re-export of <code>with_context</code> for porting from <code>anyhow</code> to <code>eyre</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/eyre/context.rs.html#97-99\">source</a><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"eyre/trait.ContextCompat.html#tymethod.context\" class=\"fn\">context</a>&lt;D&gt;(self, msg: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"eyre/struct.Report.html\" title=\"struct eyre::Report\">Report</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Compatibility version of <code>wrap_err</code> for creating new errors with new source on <code>Option</code>\nwhen porting from <code>anyhow</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/eyre/context.rs.html#107-110\">source</a><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"eyre/trait.ContextCompat.html#tymethod.with_context\" class=\"fn\">with_context</a>&lt;D, F&gt;(self, msg: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"eyre/struct.Report.html\" title=\"struct eyre::Report\">Report</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; D,</div></h4></section></summary><div class='docblock'>Compatibility version of <code>wrap_err_with</code> for creating new errors with new source on <code>Option</code>\nwhen porting from <code>anyhow</code></div></details></div></details>","ContextCompat<T>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OptionExt%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/eyre/option.rs.html#4\">source</a><a href=\"#impl-OptionExt%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"eyre/trait.OptionExt.html\" title=\"trait eyre::OptionExt\">OptionExt</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_eyre\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/eyre/option.rs.html#6-8\">source</a><a href=\"#method.ok_or_eyre\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"eyre/trait.OptionExt.html#tymethod.ok_or_eyre\" class=\"fn\">ok_or_eyre</a>&lt;M&gt;(self, message: M) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"eyre/struct.Report.html\" title=\"struct eyre::Report\">Report</a>&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Transform the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option&lt;T&gt;</code></a> into a <a href=\"eyre/type.Result.html\" title=\"type eyre::Result\"><code>Result&lt;T, E&gt;</code></a>,\nmapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a>\nand <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"eyre/struct.Report.html\" title=\"struct eyre::Report\"><code>Report</code></a>. <a href=\"eyre/trait.OptionExt.html#tymethod.ok_or_eyre\">Read more</a></div></details></div></details>","OptionExt<T>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compact-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/reth_codecs/lib.rs.html#171-173\">source</a><a href=\"#impl-Compact-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"reth_codecs/trait.Compact.html\" title=\"trait reth_codecs::Compact\">Compact</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"reth_codecs/trait.Compact.html\" title=\"trait reth_codecs::Compact\">Compact</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_compact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/reth_codecs/lib.rs.html#177-179\">source</a><a href=\"#method.to_compact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"reth_codecs/trait.Compact.html#tymethod.to_compact\" class=\"fn\">to_compact</a>&lt;B&gt;(self, buf: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    B: <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns 0 for <code>None</code> and 1 for <code>Some(_)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.specialized_to_compact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/reth_codecs/lib.rs.html#210-212\">source</a><a href=\"#method.specialized_to_compact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"reth_codecs/trait.Compact.html#method.specialized_to_compact\" class=\"fn\">specialized_to_compact</a>&lt;B&gt;(self, buf: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut B</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    B: <a class=\"trait\" href=\"bytes/buf/buf_mut/trait.BufMut.html\" title=\"trait bytes::buf::buf_mut::BufMut\">BufMut</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>To be used by fixed sized types like <code>Option&lt;B256&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.specialized_from_compact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/reth_codecs/lib.rs.html#224\">source</a><a href=\"#method.specialized_from_compact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"reth_codecs/trait.Compact.html#method.specialized_from_compact\" class=\"fn\">specialized_from_compact</a>(buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class=\"docblock\"><p>To be used by fixed sized types like <code>Option&lt;B256&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_compact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/reth_codecs/lib.rs.html#195\">source</a><a href=\"#method.from_compact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"reth_codecs/trait.Compact.html#tymethod.from_compact\" class=\"fn\">from_compact</a>(buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Takes a buffer which can be read from. Returns the object and <code>buf</code> with its internal cursor\nadvanced (eg.<code>.advance(len)</code>). <a href=\"reth_codecs/trait.Compact.html#tymethod.from_compact\">Read more</a></div></details></div></details>","Compact","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arbitrary%3C'a%3E-for-Option%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#530\">source</a><a href=\"#impl-Arbitrary%3C'a%3E-for-Option%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A&gt; <a class=\"trait\" href=\"arbitrary/trait.Arbitrary.html\" title=\"trait arbitrary::Arbitrary\">Arbitrary</a>&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"arbitrary/trait.Arbitrary.html\" title=\"trait arbitrary::Arbitrary\">Arbitrary</a>&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#531\">source</a><a href=\"#method.arbitrary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arbitrary/trait.Arbitrary.html#tymethod.arbitrary\" class=\"fn\">arbitrary</a>(u: &amp;mut <a class=\"struct\" href=\"arbitrary/unstructured/struct.Unstructured.html\" title=\"struct arbitrary::unstructured::Unstructured\">Unstructured</a>&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;, <a class=\"enum\" href=\"arbitrary/error/enum.Error.html\" title=\"enum arbitrary::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Generate an arbitrary value of <code>Self</code> from the given unstructured data. <a href=\"arbitrary/trait.Arbitrary.html#tymethod.arbitrary\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#540\">source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arbitrary/trait.Arbitrary.html#method.size_hint\" class=\"fn\">size_hint</a>(depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Get a size hint for how many bytes out of an <code>Unstructured</code> this type\nneeds to construct itself. <a href=\"arbitrary/trait.Arbitrary.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary_take_rest\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/arbitrary/lib.rs.html#189\">source</a><a href=\"#method.arbitrary_take_rest\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"arbitrary/trait.Arbitrary.html#method.arbitrary_take_rest\" class=\"fn\">arbitrary_take_rest</a>(u: <a class=\"struct\" href=\"arbitrary/unstructured/struct.Unstructured.html\" title=\"struct arbitrary::unstructured::Unstructured\">Unstructured</a>&lt;'a&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"arbitrary/error/enum.Error.html\" title=\"enum arbitrary::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Generate an arbitrary value of <code>Self</code> from the entirety of the given\nunstructured data. <a href=\"arbitrary/trait.Arbitrary.html#method.arbitrary_take_rest\">Read more</a></div></details></div></details>","Arbitrary<'a>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeInfo-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scale_info/impls.rs.html#180-182\">source</a><a href=\"#impl-TypeInfo-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"scale_info/trait.TypeInfo.html\" title=\"trait scale_info::TypeInfo\">TypeInfo</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"scale_info/trait.TypeInfo.html\" title=\"trait scale_info::TypeInfo\">TypeInfo</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Identity\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Identity\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"scale_info/trait.TypeInfo.html#associatedtype.Identity\" class=\"associatedtype\">Identity</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The type identifying for which type info is provided. <a href=\"scale_info/trait.TypeInfo.html#associatedtype.Identity\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/scale_info/impls.rs.html#186\">source</a><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scale_info/trait.TypeInfo.html#tymethod.type_info\" class=\"fn\">type_info</a>() -&gt; <a class=\"struct\" href=\"scale_info/ty/struct.Type.html\" title=\"struct scale_info::ty::Type\">Type</a></h4></section></summary><div class='docblock'>Returns the static type identifier for <code>Self</code>.</div></details></div></details>","TypeInfo","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#722\">source</a><a href=\"#impl-Encode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#723\">source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Encode.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>If possible give a hint of expected size of the encoding. <a href=\"parity_scale_codec/codec/trait.Encode.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#730\">source</a><a href=\"#method.encode_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Encode.html#method.encode_to\" class=\"fn\">encode_to</a>&lt;W&gt;(&amp;self, dest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>)<div class=\"where\">where\n    W: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Output.html\" title=\"trait parity_scale_codec::codec::Output\">Output</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert self to a slice and append it to the destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#240\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Encode.html#method.encode\" class=\"fn\">encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Convert self to an owned vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.using_encoded\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#247\">source</a><a href=\"#method.using_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Encode.html#method.using_encoded\" class=\"fn\">using_encoded</a>&lt;R, F&gt;(&amp;self, f: F) -&gt; R<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; R,</div></h4></section></summary><div class='docblock'>Convert self to a slice and then invoke the given closure with it.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#259\">source</a><a href=\"#method.encoded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Encode.html#method.encoded_size\" class=\"fn\">encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the encoded size. <a href=\"parity_scale_codec/codec/trait.Encode.html#method.encoded_size\">Read more</a></div></details></div></details>","Encode","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaxEncodedLen-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/max_encoded_len.rs.html#111\">source</a><a href=\"#impl-MaxEncodedLen-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/max_encoded_len/trait.MaxEncodedLen.html\" title=\"trait parity_scale_codec::max_encoded_len::MaxEncodedLen\">MaxEncodedLen</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/max_encoded_len/trait.MaxEncodedLen.html\" title=\"trait parity_scale_codec::max_encoded_len::MaxEncodedLen\">MaxEncodedLen</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_encoded_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/max_encoded_len.rs.html#112\">source</a><a href=\"#method.max_encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/max_encoded_len/trait.MaxEncodedLen.html#tymethod.max_encoded_len\" class=\"fn\">max_encoded_len</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Upper bound, in bytes, of the maximum encoded size of this item.</div></details></div></details>","MaxEncodedLen","reth_db::abstraction::common::IterPairResult"],["<section id=\"impl-EncodeLike%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#720\">source</a><a href=\"#impl-EncodeLike%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/encode_like/trait.EncodeLike.html\" title=\"trait parity_scale_codec::encode_like::EncodeLike\">EncodeLike</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Encode.html\" title=\"trait parity_scale_codec::codec::Encode\">Encode</a>,</div></h3></section>","EncodeLike<Option<U>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#741\">source</a><a href=\"#impl-Decode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Decode.html\" title=\"trait parity_scale_codec::codec::Decode\">Decode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Decode.html\" title=\"trait parity_scale_codec::codec::Decode\">Decode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#742\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#tymethod.decode\" class=\"fn\">decode</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Input.html\" title=\"trait parity_scale_codec::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to deserialise the value from input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#308\">source</a><a href=\"#method.decode_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#method.decode_into\" class=\"fn\">decode_into</a>&lt;I&gt;(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>,\n    dst: &amp;mut <a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;Self&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"parity_scale_codec/decode_finished/struct.DecodeFinished.html\" title=\"struct parity_scale_codec::decode_finished::DecodeFinished\">DecodeFinished</a>, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Input.html\" title=\"trait parity_scale_codec::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to deserialize the value from input into a pre-allocated piece of memory. <a href=\"parity_scale_codec/codec/trait.Decode.html#method.decode_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#320\">source</a><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#method.skip\" class=\"fn\">skip</a>&lt;I&gt;(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"parity_scale_codec/error/struct.Error.html\" title=\"struct parity_scale_codec::error::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"parity_scale_codec/codec/trait.Input.html\" title=\"trait parity_scale_codec::codec::Input\">Input</a>,</div></h4></section></summary><div class='docblock'>Attempt to skip the encoded value from input. <a href=\"parity_scale_codec/codec/trait.Decode.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_fixed_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parity_scale_codec/codec.rs.html#330\">source</a><a href=\"#method.encoded_fixed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parity_scale_codec/codec/trait.Decode.html#method.encoded_fixed_size\" class=\"fn\">encoded_fixed_size</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the fixed encoded size of the type. <a href=\"parity_scale_codec/codec/trait.Decode.html#method.encoded_fixed_size\">Read more</a></div></details></div></details>","Decode","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#130-132\">source</a><a href=\"#impl-Decodable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rlp/traits/trait.Decodable.html\" title=\"trait rlp::traits::Decodable\">Decodable</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"rlp/traits/trait.Decodable.html\" title=\"trait rlp::traits::Decodable\">Decodable</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#134\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rlp/traits/trait.Decodable.html#tymethod.decode\" class=\"fn\">decode</a>(rlp: &amp;<a class=\"struct\" href=\"rlp/rlpin/struct.Rlp.html\" title=\"struct rlp::rlpin::Rlp\">Rlp</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"enum\" href=\"rlp/error/enum.DecoderError.html\" title=\"enum rlp::error::DecoderError\">DecoderError</a>&gt;</h4></section></summary><div class='docblock'>Decode a value from RLP bytes</div></details></div></details>","Decodable","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#113-115\">source</a><a href=\"#impl-Encodable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rlp/traits/trait.Encodable.html\" title=\"trait rlp::traits::Encodable\">Encodable</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"rlp/traits/trait.Encodable.html\" title=\"trait rlp::traits::Encodable\">Encodable</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rlp_append\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rlp/impls.rs.html#117\">source</a><a href=\"#method.rlp_append\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rlp/traits/trait.Encodable.html#tymethod.rlp_append\" class=\"fn\">rlp_append</a>(&amp;self, s: &amp;mut <a class=\"struct\" href=\"rlp/stream/struct.RlpStream.html\" title=\"struct rlp::stream::RlpStream\">RlpStream</a>)</h4></section></summary><div class='docblock'>Append a value to the stream</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rlp_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rlp/traits.rs.html#26\">source</a><a href=\"#method.rlp_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rlp/traits/trait.Encodable.html#method.rlp_bytes\" class=\"fn\">rlp_bytes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bytes/bytes_mut/struct.BytesMut.html\" title=\"struct bytes::bytes_mut::BytesMut\">BytesMut</a></h4></section></summary><div class='docblock'>Get rlp-encoded bytes for this instance</div></details></div></details>","Encodable","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arbitrary-for-Option%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/proptest/arbitrary/_core/option.rs.html#31-37\">source</a><a href=\"#impl-Arbitrary-for-Option%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html\" title=\"trait proptest::arbitrary::traits::Arbitrary\">Arbitrary</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html\" title=\"trait proptest::arbitrary::traits::Arbitrary\">Arbitrary</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Parameters\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Parameters\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Parameters\" class=\"associatedtype\">Parameters</a> = (<a class=\"struct\" href=\"proptest/option/struct.Probability.html\" title=\"struct proptest::option::Probability\">Probability</a>, &lt;A as <a class=\"trait\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html\" title=\"trait proptest::arbitrary::traits::Arbitrary\">Arbitrary</a>&gt;::<a class=\"associatedtype\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Parameters\" title=\"type proptest::arbitrary::traits::Arbitrary::Parameters\">Parameters</a>)</h4></section></summary><div class='docblock'>The type of parameters that <a href=\"trait.Arbitrary.html#tymethod.arbitrary_with\"><code>arbitrary_with</code></a> accepts for configuration\nof the generated <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a>. Parameters must implement <a href=\"https://doc.rust-lang.org/nightly/std/default/trait.Default.html\"><code>Default</code></a>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Strategy\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Strategy\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Strategy\" class=\"associatedtype\">Strategy</a> = <a class=\"struct\" href=\"proptest/option/struct.OptionStrategy.html\" title=\"struct proptest::option::OptionStrategy\">OptionStrategy</a>&lt;&lt;A as <a class=\"trait\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html\" title=\"trait proptest::arbitrary::traits::Arbitrary\">Arbitrary</a>&gt;::<a class=\"associatedtype\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Strategy\" title=\"type proptest::arbitrary::traits::Arbitrary::Strategy\">Strategy</a>&gt;</h4></section></summary><div class='docblock'>The type of <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> used to generate values of type <code>Self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/proptest/arbitrary/_core/option.rs.html#31-37\">source</a><a href=\"#method.arbitrary_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"proptest/arbitrary/traits/trait.Arbitrary.html#tymethod.arbitrary_with\" class=\"fn\">arbitrary_with</a>(\n    args: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt; as <a class=\"trait\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html\" title=\"trait proptest::arbitrary::traits::Arbitrary\">Arbitrary</a>&gt;::<a class=\"associatedtype\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Parameters\" title=\"type proptest::arbitrary::traits::Arbitrary::Parameters\">Parameters</a>\n) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt; as <a class=\"trait\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html\" title=\"trait proptest::arbitrary::traits::Arbitrary\">Arbitrary</a>&gt;::<a class=\"associatedtype\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Strategy\" title=\"type proptest::arbitrary::traits::Arbitrary::Strategy\">Strategy</a></h4></section></summary><div class='docblock'>Generates a <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> for producing arbitrary values of type the\nimplementing type (<code>Self</code>). The strategy is passed the arguments given\nin args. <a href=\"proptest/arbitrary/traits/trait.Arbitrary.html#tymethod.arbitrary_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arbitrary\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/proptest/arbitrary/traits.rs.html#69\">source</a><a href=\"#method.arbitrary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"proptest/arbitrary/traits/trait.Arbitrary.html#method.arbitrary\" class=\"fn\">arbitrary</a>() -&gt; Self::<a class=\"associatedtype\" href=\"proptest/arbitrary/traits/trait.Arbitrary.html#associatedtype.Strategy\" title=\"type proptest::arbitrary::traits::Arbitrary::Strategy\">Strategy</a></h4></section></summary><div class='docblock'>Generates a <a href=\"../strategy/trait.Strategy.html\"><code>Strategy</code></a> for producing arbitrary values\nof type the implementing type (<code>Self</code>). <a href=\"proptest/arbitrary/traits/trait.Arbitrary.html#method.arbitrary\">Read more</a></div></details></div></details>","Arbitrary","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArbitraryF1%3CA%3E-for-Option%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/proptest/arbitrary/_core/option.rs.html#39\">source</a><a href=\"#impl-ArbitraryF1%3CA%3E-for-Option%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html\" title=\"trait proptest::arbitrary::functor::ArbitraryF1\">ArbitraryF1</a>&lt;A&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Parameters\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Parameters\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html#associatedtype.Parameters\" class=\"associatedtype\">Parameters</a> = <a class=\"struct\" href=\"proptest/option/struct.Probability.html\" title=\"struct proptest::option::Probability\">Probability</a></h4></section></summary><div class='docblock'>The type of parameters that <a href=\"trait.ArbitraryF1.html#tymethod.lift1_with\"><code>lift1_with</code></a> accepts for\nconfiguration of the lifted and generated <a href=\"../proptest/strategy/trait.Strategy.html\"><code>Strategy</code></a>. Parameters\nmust implement <a href=\"https://doc.rust-lang.org/nightly/std/default/trait.Default.html\"><code>Default</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lift1_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/proptest/arbitrary/_core/option.rs.html#39\">source</a><a href=\"#method.lift1_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html#tymethod.lift1_with\" class=\"fn\">lift1_with</a>&lt;S&gt;(\n    base: S,\n    prob: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt; as <a class=\"trait\" href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html\" title=\"trait proptest::arbitrary::functor::ArbitraryF1\">ArbitraryF1</a>&lt;A&gt;&gt;::<a class=\"associatedtype\" href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html#associatedtype.Parameters\" title=\"type proptest::arbitrary::functor::ArbitraryF1::Parameters\">Parameters</a>\n) -&gt; <a class=\"struct\" href=\"proptest/strategy/traits/struct.BoxedStrategy.html\" title=\"struct proptest::strategy::traits::BoxedStrategy\">BoxedStrategy</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"proptest/strategy/traits/trait.Strategy.html\" title=\"trait proptest::strategy::traits::Strategy\">Strategy</a>&lt;Value = A&gt; + 'static,</div></h4></section></summary><div class='docblock'>Lifts a given <a href=\"../proptest/strategy/trait.Strategy.html\"><code>Strategy</code></a> to a new <a href=\"../proptest/strategy/trait.Strategy.html\"><code>Strategy</code></a> for the (presumably)\nbigger type. This is useful for lifting a <code>Strategy</code> for <code>SomeType</code>\nto a container such as <code>Vec</code> of <code>SomeType</code>. The composite strategy is\npassed the arguments given in <code>args</code>. <a href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html#tymethod.lift1_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lift1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/proptest/arbitrary/functor.rs.html#94-96\">source</a><a href=\"#method.lift1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html#method.lift1\" class=\"fn\">lift1</a>&lt;AS&gt;(base: AS) -&gt; <a class=\"struct\" href=\"proptest/strategy/traits/struct.BoxedStrategy.html\" title=\"struct proptest::strategy::traits::BoxedStrategy\">BoxedStrategy</a>&lt;Self&gt;<div class=\"where\">where\n    AS: <a class=\"trait\" href=\"proptest/strategy/traits/trait.Strategy.html\" title=\"trait proptest::strategy::traits::Strategy\">Strategy</a>&lt;Value = A&gt; + 'static,</div></h4></section></summary><div class='docblock'>Lifts a given <a href=\"../proptest/strategy/trait.Strategy.html\"><code>Strategy</code></a> to a new <a href=\"../proptest/strategy/trait.Strategy.html\"><code>Strategy</code></a> for the (presumably)\nbigger type. This is useful for lifting a <code>Strategy</code> for <code>SomeType</code>\nto a container such as <code>Vec&lt;SomeType&gt;</code>. <a href=\"proptest/arbitrary/functor/trait.ArbitraryF1.html#method.lift1\">Read more</a></div></details></div></details>","ArbitraryF1<A>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3COption%3CT%3E%3E-for-Option%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_with/ser/impls.rs.html#118-120\">source</a><a href=\"#impl-SerializeAs%3COption%3CT%3E%3E-for-Option%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_with/ser/impls.rs.html#122-124\">source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Option<T>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Option%3CT%3E%3E-for-Option%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_with/de/impls.rs.html#119-121\">source</a><a href=\"#impl-DeserializeAs%3C'de,+Option%3CT%3E%3E-for-Option%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_with/de/impls.rs.html#123-125\">source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Option<T>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Context%3CT,+Infallible%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/anyhow/context.rs.html#90\">source</a><a href=\"#impl-Context%3CT,+Infallible%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"anyhow/trait.Context.html\" title=\"trait anyhow::Context\">Context</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>anyhow::{Context, <span class=\"prelude-ty\">Result</span>};\n\n<span class=\"kw\">fn </span>maybe_get() -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n    ...\n}\n\n<span class=\"kw\">fn </span>demo() -&gt; <span class=\"prelude-ty\">Result</span>&lt;()&gt; {\n    <span class=\"kw\">let </span>t = maybe_get().context(<span class=\"string\">\"there is no T\"</span>)<span class=\"question-mark\">?</span>;\n    ...\n}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/anyhow/context.rs.html#91-93\">source</a><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"anyhow/trait.Context.html#tymethod.context\" class=\"fn\">context</a>&lt;C&gt;(self, context: C) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/anyhow/context.rs.html#103-106\">source</a><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"anyhow/trait.Context.html#tymethod.with_context\" class=\"fn\">with_context</a>&lt;C, F&gt;(self, context: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; C,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.</div></details></div></details>","Context<T, Infallible>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tracing_core/field.rs.html#749\">source</a><a href=\"#impl-Value-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"tracing_core/field/trait.Value.html\" title=\"trait tracing_core::field::Value\">Value</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"tracing_core/field/trait.Value.html\" title=\"trait tracing_core::field::Value\">Value</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_core/field.rs.html#750\">source</a><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_core/field/trait.Value.html#tymethod.record\" class=\"fn\">record</a>(&amp;self, key: &amp;<a class=\"struct\" href=\"tracing_core/field/struct.Field.html\" title=\"struct tracing_core::field::Field\">Field</a>, visitor: &amp;mut dyn <a class=\"trait\" href=\"tracing_core/field/trait.Visit.html\" title=\"trait tracing_core::field::Visit\">Visit</a>)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Option%3CZ%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zeroize/lib.rs.html#392-394\">source</a><a href=\"#impl-Zeroize-for-Option%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Z&gt;<div class=\"where\">where\n    Z: <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zeroize/lib.rs.html#396\">source</a><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"zeroize/trait.Zeroize.html#tymethod.zeroize\" class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","reth_db::abstraction::common::IterPairResult"],["<section id=\"impl-ZeroizeOnDrop-for-Option%3CZ%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/zeroize/lib.rs.html#432\">source</a><a href=\"#impl-ZeroizeOnDrop-for-Option%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; <a class=\"trait\" href=\"zeroize/trait.ZeroizeOnDrop.html\" title=\"trait zeroize::ZeroizeOnDrop\">ZeroizeOnDrop</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Z&gt;<div class=\"where\">where\n    Z: <a class=\"trait\" href=\"zeroize/trait.ZeroizeOnDrop.html\" title=\"trait zeroize::ZeroizeOnDrop\">ZeroizeOnDrop</a>,</div></h3></section>","ZeroizeOnDrop","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/subtle/lib.rs.html#654\">source</a><a href=\"#impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/subtle/lib.rs.html#664\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(source: <a class=\"struct\" href=\"subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, depending on whether\nthe underlying <code>is_some</code> <code>Choice</code> was a <code>0</code> or a <code>1</code> once unwrapped.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>This function exists to avoid ending up with ugly, verbose and/or bad handled\nconversions from the <code>CtOption&lt;T&gt;</code> wraps to an <code>Option&lt;T&gt;</code> or <code>Result&lt;T, E&gt;</code>.\nThis implementation doesn’t intend to be constant-time nor try to protect the\nleakage of the <code>T</code> since the <code>Option&lt;T&gt;</code> will do it anyways.</p>\n</div></details></div></details>","From<CtOption<T>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Searial-for-Option%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#52-54\">source</a><a href=\"#impl-Searial-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"sucds/serial/trait.Searial.html\" title=\"trait sucds::serial::Searial\">Searial</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"sucds/serial/trait.Searial.html\" title=\"trait sucds::serial::Searial\">Searial</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#56\">source</a><a href=\"#method.serialize_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Searial.html#tymethod.serialize_into\" class=\"fn\">serialize_into</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes the data structure into the writer,\nreturning the number of serialized bytes. <a href=\"sucds/serial/trait.Searial.html#tymethod.serialize_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#67\">source</a><a href=\"#method.deserialize_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Searial.html#tymethod.deserialize_from\" class=\"fn\">deserialize_from</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;, <a class=\"struct\" href=\"anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Deserializes the data structure from the reader. <a href=\"sucds/serial/trait.Searial.html#tymethod.deserialize_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_in_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#76\">source</a><a href=\"#method.size_in_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Searial.html#tymethod.size_in_bytes\" class=\"fn\">size_in_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes to serialize the data structure.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#47\">source</a><a href=\"#method.size_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Searial.html#method.size_of\" class=\"fn\">size_of</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the size of a primitive type in bytes (if the type is so).</div></details></div></details>","Searial","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TapOptional-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#417\">source</a><a href=\"#impl-TapOptional-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"tap/tap/trait.TapOptional.html\" title=\"trait tap::tap::TapOptional\">TapOptional</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Val\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Val\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"tap/tap/trait.TapOptional.html#associatedtype.Val\" class=\"associatedtype\">Val</a> = T</h4></section></summary><div class='docblock'>The interior type that the container may or may not carry.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#421\">source</a><a href=\"#method.tap_some\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some\" class=\"fn\">tap_some</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Immutabily accesses an interior value only when it is present. <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#429\">source</a><a href=\"#method.tap_some_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some_mut\" class=\"fn\">tap_some_mut</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>)) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Mutably accesses an interor value only when it is present. <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_some_mut\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_none\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#437\">source</a><a href=\"#method.tap_none\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_none\" class=\"fn\">tap_none</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>()) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Runs an effect function when the container is empty. <a href=\"tap/tap/trait.TapOptional.html#tymethod.tap_none\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some_dbg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#386\">source</a><a href=\"#method.tap_some_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#method.tap_some_dbg\" class=\"fn\">tap_some_dbg</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;Self::<a class=\"associatedtype\" href=\"tap/tap/trait.TapOptional.html#associatedtype.Val\" title=\"type tap::tap::TapOptional::Val\">Val</a>)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_some()</code> only in debug builds, and is erased in release\nbuilds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_some_mut_dbg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#397\">source</a><a href=\"#method.tap_some_mut_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#method.tap_some_mut_dbg\" class=\"fn\">tap_some_mut_dbg</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut Self::<a class=\"associatedtype\" href=\"tap/tap/trait.TapOptional.html#associatedtype.Val\" title=\"type tap::tap::TapOptional::Val\">Val</a>)) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_some_mut()</code> only in debug builds, and is erased in release\nbuilds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tap_none_dbg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tap/tap.rs.html#408\">source</a><a href=\"#method.tap_none_dbg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tap/tap/trait.TapOptional.html#method.tap_none_dbg\" class=\"fn\">tap_none_dbg</a>(self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>()) -&gt; Self</h4></section></summary><div class='docblock'>Calls <code>.tap_none()</code> only in debug builds, and is erased in release\nbuilds.</div></details></div></details>","TapOptional","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CPtr-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1_sys/lib.rs.html#1071\">source</a><a href=\"#impl-CPtr-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = &lt;T as <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt;::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section><section id=\"method.as_mut_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1_sys/lib.rs.html#1073\">source</a><a href=\"#method.as_mut_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_mut_c_ptr\" class=\"fn\">as_mut_c_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt;::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section><section id=\"method.as_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1_sys/lib.rs.html#1079\">source</a><a href=\"#method.as_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_c_ptr\" class=\"fn\">as_c_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt;::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section></div></details>","CPtr","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CChecked%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/crypto_bigint/checked.rs.html#57\">source</a><a href=\"#impl-From%3CChecked%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"crypto_bigint/checked/struct.Checked.html\" title=\"struct crypto_bigint::checked::Checked\">Checked</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/crypto_bigint/checked.rs.html#58\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(checked: <a class=\"struct\" href=\"crypto_bigint/checked/struct.Checked.html\" title=\"struct crypto_bigint::checked::Checked\">Checked</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Checked<T>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#36-38\">source</a><a href=\"#impl-Encode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"der/encode/trait.Encode.html\" title=\"trait der::encode::Encode\">Encode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/encode/trait.Encode.html\" title=\"trait der::encode::Encode\">Encode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#40\">source</a><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.Encode.html#tymethod.encoded_len\" class=\"fn\">encoded_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"der/length/struct.Length.html\" title=\"struct der::length::Length\">Length</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Compute the length of this value in bytes when encoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#44\">source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.Encode.html#tymethod.encode\" class=\"fn\">encode</a>(&amp;self, writer: &amp;mut impl <a class=\"trait\" href=\"der/writer/trait.Writer.html\" title=\"trait der::writer::Writer\">Writer</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode this value as ASN.1 DER using the provided <a href=\"der/writer/trait.Writer.html\" title=\"trait der::writer::Writer\"><code>Writer</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/encode.rs.html#32\">source</a><a href=\"#method.encode_to_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.Encode.html#method.encode_to_slice\" class=\"fn\">encode_to_slice</a>&lt;'a&gt;(&amp;self, buf: &amp;'a mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode this value to the provided byte slice, returning a sub-slice\ncontaining the encoded message.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/encode.rs.html#41\">source</a><a href=\"#method.encode_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.Encode.html#method.encode_to_vec\" class=\"fn\">encode_to_vec</a>(&amp;self, buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"der/length/struct.Length.html\" title=\"struct der::length::Length\">Length</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode this message as ASN.1 DER, appending it to the provided\nbyte vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_der\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/encode.rs.html#63\">source</a><a href=\"#method.to_der\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/encode/trait.Encode.html#method.to_der\" class=\"fn\">to_der</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Encode this type as DER, returning a byte vector.</div></details></div></details>","Encode","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OwnedToRef-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/referenced.rs.html#27-29\">source</a><a href=\"#impl-OwnedToRef-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"der/referenced/trait.OwnedToRef.html\" title=\"trait der::referenced::OwnedToRef\">OwnedToRef</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/referenced/trait.OwnedToRef.html\" title=\"trait der::referenced::OwnedToRef\">OwnedToRef</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Borrowed\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Borrowed\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"der/referenced/trait.OwnedToRef.html#associatedtype.Borrowed\" class=\"associatedtype\">Borrowed</a>&lt;'a&gt; = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as <a class=\"trait\" href=\"der/referenced/trait.OwnedToRef.html\" title=\"trait der::referenced::OwnedToRef\">OwnedToRef</a>&gt;::<a class=\"associatedtype\" href=\"der/referenced/trait.OwnedToRef.html#associatedtype.Borrowed\" title=\"type der::referenced::OwnedToRef::Borrowed\">Borrowed</a>&lt;'a&gt;&gt;\n<span class=\"where\">where\n    T: 'a</span></h4></section></summary><div class='docblock'>The resulting type referencing back to Self</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.owned_to_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/referenced.rs.html#33\">source</a><a href=\"#method.owned_to_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/referenced/trait.OwnedToRef.html#tymethod.owned_to_ref\" class=\"fn\">owned_to_ref</a>(&amp;self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"der/referenced/trait.OwnedToRef.html\" title=\"trait der::referenced::OwnedToRef\">OwnedToRef</a>&gt;::<a class=\"associatedtype\" href=\"der/referenced/trait.OwnedToRef.html#associatedtype.Borrowed\" title=\"type der::referenced::OwnedToRef::Borrowed\">Borrowed</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Creates a new object referencing back to the self for storage</div></details></div></details>","OwnedToRef","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerOrd-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#21-23\">source</a><a href=\"#impl-DerOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"der/ord/trait.DerOrd.html\" title=\"trait der::ord::DerOrd\">DerOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/ord/trait.DerOrd.html\" title=\"trait der::ord::DerOrd\">DerOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.der_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#25\">source</a><a href=\"#method.der_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/ord/trait.DerOrd.html#tymethod.der_cmp\" class=\"fn\">der_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code> when serialized as\nASN.1 DER.</div></details></div></details>","DerOrd","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefToOwned%3C'a%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/referenced.rs.html#38-41\">source</a><a href=\"#impl-RefToOwned%3C'a%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"der/referenced/trait.RefToOwned.html\" title=\"trait der::referenced::RefToOwned\">RefToOwned</a>&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/referenced/trait.RefToOwned.html\" title=\"trait der::referenced::RefToOwned\">RefToOwned</a>&lt;'a&gt; + 'a,\n    &lt;T as <a class=\"trait\" href=\"der/referenced/trait.RefToOwned.html\" title=\"trait der::referenced::RefToOwned\">RefToOwned</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"der/referenced/trait.RefToOwned.html#associatedtype.Owned\" title=\"type der::referenced::RefToOwned::Owned\">Owned</a>: <a class=\"trait\" href=\"der/referenced/trait.OwnedToRef.html\" title=\"trait der::referenced::OwnedToRef\">OwnedToRef</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"der/referenced/trait.RefToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as <a class=\"trait\" href=\"der/referenced/trait.RefToOwned.html\" title=\"trait der::referenced::RefToOwned\">RefToOwned</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"der/referenced/trait.RefToOwned.html#associatedtype.Owned\" title=\"type der::referenced::RefToOwned::Owned\">Owned</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/referenced.rs.html#44\">source</a><a href=\"#method.ref_to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/referenced/trait.RefToOwned.html#tymethod.ref_to_owned\" class=\"fn\">ref_to_owned</a>(&amp;self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"der/referenced/trait.RefToOwned.html\" title=\"trait der::referenced::RefToOwned\">RefToOwned</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"der/referenced/trait.RefToOwned.html#associatedtype.Owned\" title=\"type der::referenced::RefToOwned::Owned\">Owned</a></h4></section></summary><div class='docblock'>Creates a new object taking ownership of the data</div></details></div></details>","RefToOwned<'a>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'a%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#6-8\">source</a><a href=\"#impl-Decode%3C'a%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"der/decode/trait.Decode.html\" title=\"trait der::decode::Decode\">Decode</a>&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"der/asn1/choice/trait.Choice.html\" title=\"trait der::asn1::choice::Choice\">Choice</a>&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/asn1/optional.rs.html#10\">source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/decode/trait.Decode.html#tymethod.decode\" class=\"fn\">decode</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"der/reader/trait.Reader.html\" title=\"trait der::reader::Reader\">Reader</a>&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided decoder.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_der\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/der/decode.rs.html#24\">source</a><a href=\"#method.from_der\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"der/decode/trait.Decode.html#method.from_der\" class=\"fn\">from_der</a>(bytes: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"der/error/struct.Error.html\" title=\"struct der::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Parse <code>Self</code> from the provided DER-encoded byte slice.</div></details></div></details>","Decode<'a>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rayon/option.rs.html#173-176\">source</a><a href=\"#impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, T&gt; <a class=\"trait\" href=\"rayon/iter/trait.FromParallelIterator.html\" title=\"trait rayon::iter::FromParallelIterator\">FromParallelIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"rayon/iter/trait.FromParallelIterator.html\" title=\"trait rayon::iter::FromParallelIterator\">FromParallelIterator</a>&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"docblock\"><p>Collect an arbitrary <code>Option</code>-wrapped collection.</p>\n<p>If any item is <code>None</code>, then all previous items collected are discarded,\nand it returns only <code>None</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rayon/option.rs.html#178-180\">source</a><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rayon/iter/trait.FromParallelIterator.html#tymethod.from_par_iter\" class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a href=\"rayon/iter/trait.FromParallelIterator.html#tymethod.from_par_iter\">Read more</a></div></details></div></details>","FromParallelIterator<Option<T>>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rayon/option.rs.html#26\">source</a><a href=\"#impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rayon/iter/trait.IntoParallelIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"rayon/iter/trait.IntoParallelIterator.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"rayon/option/struct.IntoIter.html\" title=\"struct rayon::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rayon/option.rs.html#30\">source</a><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rayon/iter/trait.IntoParallelIterator.html#tymethod.into_par_iter\" class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"rayon/iter/trait.IntoParallelIterator.html\" title=\"trait rayon::iter::IntoParallelIterator\">IntoParallelIterator</a>&gt;::<a class=\"associatedtype\" href=\"rayon/iter/trait.IntoParallelIterator.html#associatedtype.Iter\" title=\"type rayon::iter::IntoParallelIterator::Iter\">Iter</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a href=\"rayon/iter/trait.IntoParallelIterator.html#tymethod.into_par_iter\">Read more</a></div></details></div></details>","IntoParallelIterator","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serializable-for-Option%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#55-57\">source</a><a href=\"#impl-Serializable-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"sucds/serial/trait.Serializable.html\" title=\"trait sucds::serial::Serializable\">Serializable</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"sucds/serial/trait.Serializable.html\" title=\"trait sucds::serial::Serializable\">Serializable</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#59\">source</a><a href=\"#method.serialize_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Serializable.html#tymethod.serialize_into\" class=\"fn\">serialize_into</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes the data structure into the writer,\nreturning the number of serialized bytes. <a href=\"sucds/serial/trait.Serializable.html#tymethod.serialize_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#70\">source</a><a href=\"#method.deserialize_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Serializable.html#tymethod.deserialize_from\" class=\"fn\">deserialize_from</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;, <a class=\"struct\" href=\"anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Deserializes the data structure from the reader. <a href=\"sucds/serial/trait.Serializable.html#tymethod.deserialize_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_in_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#79\">source</a><a href=\"#method.size_in_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Serializable.html#tymethod.size_in_bytes\" class=\"fn\">size_in_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes to serialize the data structure.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sucds/serial.rs.html#50\">source</a><a href=\"#method.size_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sucds/serial/trait.Serializable.html#method.size_of\" class=\"fn\">size_of</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the size of a primitive type in bytes (if the type is so).</div></details></div></details>","Serializable","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_bytes/ser.rs.html#127-129\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"serde_bytes/ser/trait.Serialize.html\" title=\"trait serde_bytes::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde_bytes/ser/trait.Serialize.html\" title=\"trait serde_bytes::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_bytes/ser.rs.html#131-133\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde_bytes/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></div></details>","Serialize","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_bytes/de.rs.html#228-230\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"serde_bytes/de/trait.Deserialize.html\" title=\"trait serde_bytes::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"serde_bytes/de/trait.Deserialize.html\" title=\"trait serde_bytes::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_bytes/de.rs.html#232-234\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde_bytes/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></div></details>","Deserialize<'de>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Option%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1559-1562\">source</a><a href=\"#impl-Layer%3CS%3E-for-Option%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, S&gt; <a class=\"trait\" href=\"tracing_subscriber/layer/trait.Layer.html\" title=\"trait tracing_subscriber::layer::Layer\">Layer</a>&lt;S&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"tracing_subscriber/layer/trait.Layer.html\" title=\"trait tracing_subscriber::layer::Layer\">Layer</a>&lt;S&gt;,\n    S: <a class=\"trait\" href=\"tracing_core/subscriber/trait.Subscriber.html\" title=\"trait tracing_core::subscriber::Subscriber\">Subscriber</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1564\">source</a><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_layer\" class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n<a href=\"tracing_core/subscriber/trait.Subscriber.html\" title=\"trait tracing_core::subscriber::Subscriber\"><code>Subscriber</code></a>. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_layer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1571\">source</a><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_new_span\" class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Attributes.html\" title=\"struct tracing_core::span::Attributes\">Attributes</a>&lt;'_&gt;, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1578\">source</a><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.register_callsite\" class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static <a class=\"struct\" href=\"tracing_core/metadata/struct.Metadata.html\" title=\"struct tracing_core::metadata::Metadata\">Metadata</a>&lt;'static&gt;) -&gt; <a class=\"struct\" href=\"tracing_core/subscriber/struct.Interest.html\" title=\"struct tracing_core::subscriber::Interest\">Interest</a></h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core/subscriber/trait.Subscriber.html#method.register_callsite\" title=\"method tracing_core::subscriber::Subscriber::register_callsite\"><code>Subscriber::register_callsite</code></a>. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.register_callsite\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1586\">source</a><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.enabled\" class=\"fn\">enabled</a>(&amp;self, metadata: &amp;<a class=\"struct\" href=\"tracing_core/metadata/struct.Metadata.html\" title=\"struct tracing_core::metadata::Metadata\">Metadata</a>&lt;'_&gt;, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current <a href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\"><code>Context</code></a>, similarly to\n<a href=\"tracing_core/subscriber/trait.Subscriber.html#tymethod.enabled\" title=\"method tracing_core::subscriber::Subscriber::enabled\"><code>Subscriber::enabled</code></a>. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.enabled\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1606\">source</a><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_record\" class=\"fn\">on_record</a>(&amp;self, span: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, values: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Record.html\" title=\"struct tracing_core::span::Record\">Record</a>&lt;'_&gt;, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1613\">source</a><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_follows_from\" class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, follows: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1620\">source</a><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.event_enabled\" class=\"fn\">event_enabled</a>(&amp;self, event: &amp;<a class=\"struct\" href=\"tracing_core/event/struct.Event.html\" title=\"struct tracing_core::event::Event\">Event</a>&lt;'_&gt;, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_event\" title=\"method tracing_subscriber::layer::Layer::on_event::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1628\">source</a><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_event\" class=\"fn\">on_event</a>(&amp;self, event: &amp;<a class=\"struct\" href=\"tracing_core/event/struct.Event.html\" title=\"struct tracing_core::event::Event\">Event</a>&lt;'_&gt;, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1635\">source</a><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_enter\" class=\"fn\">on_enter</a>(&amp;self, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1642\">source</a><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_exit\" class=\"fn\">on_exit</a>(&amp;self, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1649\">source</a><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_close\" class=\"fn\">on_close</a>(&amp;self, id: <a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1656\">source</a><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_id_change\" class=\"fn\">on_id_change</a>(&amp;self, old: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, new: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#753\">source</a><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_register_dispatch\" class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;<a class=\"struct\" href=\"tracing_core/dispatcher/struct.Dispatch.html\" title=\"struct tracing_core::dispatcher::Dispatch\">Dispatch</a>)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core/subscriber/trait.Subscriber.html\" title=\"trait tracing_core::subscriber::Subscriber\"><code>Subscriber</code></a>. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.on_register_dispatch\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1039-1042\">source</a><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.and_then\" class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; <a class=\"struct\" href=\"tracing_subscriber/layer/layered/struct.Layered.html\" title=\"struct tracing_subscriber::layer::layered::Layered\">Layered</a>&lt;L, Self, S&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"tracing_subscriber/layer/trait.Layer.html\" title=\"trait tracing_subscriber::layer::Layer\">Layer</a>&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.and_then\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1091-1093\">source</a><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.with_subscriber\" class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; <a class=\"struct\" href=\"tracing_subscriber/layer/layered/struct.Layered.html\" title=\"struct tracing_subscriber::layer::layered::Layered\">Layered</a>&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core/subscriber/trait.Subscriber.html\" title=\"trait tracing_core::subscriber::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core/subscriber/trait.Subscriber.html\" title=\"trait tracing_core::subscriber::Subscriber\"><code>Subscriber</code></a>. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.with_subscriber\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/layer/mod.rs.html#1110-1113\">source</a><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Layer.html#method.with_filter\" class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; <a class=\"struct\" href=\"tracing_subscriber/filter/layer_filters/struct.Filtered.html\" title=\"struct tracing_subscriber::filter::layer_filters::Filtered\">Filtered</a>&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"tracing_subscriber/layer/trait.Filter.html\" title=\"trait tracing_subscriber::layer::Filter\">Filter</a>&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a <a href=\"tracing_subscriber/layer/trait.Filter.html\" title=\"trait tracing_subscriber::layer::Filter\"><code>Filter</code></a>, returning a <a href=\"tracing_subscriber/filter/layer_filters/struct.Filtered.html\" title=\"struct tracing_subscriber::filter::layer_filters::Filtered\"><code>Filtered</code></a> layer. <a href=\"tracing_subscriber/layer/trait.Layer.html#method.with_filter\">Read more</a></div></details></div></details>","Layer<S>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Filter%3CS%3E-for-Option%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#529-531\">source</a><a href=\"#impl-Filter%3CS%3E-for-Option%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, S&gt; <a class=\"trait\" href=\"tracing_subscriber/layer/trait.Filter.html\" title=\"trait tracing_subscriber::layer::Filter\">Filter</a>&lt;S&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"tracing_subscriber/layer/trait.Filter.html\" title=\"trait tracing_subscriber::layer::Filter\">Filter</a>&lt;S&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#534\">source</a><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#tymethod.enabled\" class=\"fn\">enabled</a>(&amp;self, meta: &amp;<a class=\"struct\" href=\"tracing_core/metadata/struct.Metadata.html\" title=\"struct tracing_core::metadata::Metadata\">Metadata</a>&lt;'_&gt;, ctx: &amp;<a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <a href=\"tracing_core/metadata/struct.Metadata.html\" title=\"struct tracing_core::metadata::Metadata\"><code>Metadata</code></a> in the current <a href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\"><code>Context</code></a>, similarly to\n<a href=\"tracing_core/subscriber/trait.Subscriber.html#tymethod.enabled\" title=\"method tracing_core::subscriber::Subscriber::enabled\"><code>Subscriber::enabled</code></a>. <a href=\"tracing_subscriber/layer/trait.Filter.html#tymethod.enabled\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.callsite_enabled\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#541\">source</a><a href=\"#method.callsite_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.callsite_enabled\" class=\"fn\">callsite_enabled</a>(&amp;self, meta: &amp;'static <a class=\"struct\" href=\"tracing_core/metadata/struct.Metadata.html\" title=\"struct tracing_core::metadata::Metadata\">Metadata</a>&lt;'static&gt;) -&gt; <a class=\"struct\" href=\"tracing_core/subscriber/struct.Interest.html\" title=\"struct tracing_core::subscriber::Interest\">Interest</a></h4></section></summary><div class='docblock'>Returns an <a href=\"tracing_core/subscriber/struct.Interest.html\" title=\"struct tracing_core::subscriber::Interest\"><code>Interest</code></a> indicating whether this layer will <a href=\"tracing_core/subscriber/struct.Interest.html#method.always\" title=\"associated function tracing_core::subscriber::Interest::always\">always</a>,\n<a href=\"tracing_core/subscriber/struct.Interest.html#method.sometimes\" title=\"associated function tracing_core::subscriber::Interest::sometimes\">sometimes</a>, or <a href=\"tracing_core/subscriber/struct.Interest.html#method.never\" title=\"associated function tracing_core::subscriber::Interest::never\">never</a> be interested in the given <a href=\"tracing_core/metadata/struct.Metadata.html\" title=\"struct tracing_core::metadata::Metadata\"><code>Metadata</code></a>. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.callsite_enabled\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_level_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#548\">source</a><a href=\"#method.max_level_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.max_level_hint\" class=\"fn\">max_level_hint</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"tracing_core/metadata/struct.LevelFilter.html\" title=\"struct tracing_core::metadata::LevelFilter\">LevelFilter</a>&gt;</h4></section></summary><div class='docblock'>Returns an optional hint of the highest <a href=\"tracing_core/metadata/struct.Level.html\" title=\"struct tracing_core::metadata::Level\">verbosity level</a> that\nthis <code>Filter</code> will enable. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.max_level_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#553\">source</a><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.event_enabled\" class=\"fn\">event_enabled</a>(&amp;self, event: &amp;<a class=\"struct\" href=\"tracing_core/event/struct.Event.html\" title=\"struct tracing_core::event::Event\">Event</a>&lt;'_&gt;, ctx: &amp;<a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before the filtered [<code>Layer]'s [</code>on_event<code>], to determine if </code>on_event` should be called. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.event_enabled\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#560\">source</a><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_new_span\" class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Attributes.html\" title=\"struct tracing_core::span::Attributes\">Attributes</a>&lt;'_&gt;, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this filter that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_new_span\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#567\">source</a><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_record\" class=\"fn\">on_record</a>(&amp;self, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, values: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Record.html\" title=\"struct tracing_core::span::Record\">Record</a>&lt;'_&gt;, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this filter that a span with the given <code>Id</code> recorded the given\n<code>values</code>. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_record\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#574\">source</a><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_enter\" class=\"fn\">on_enter</a>(&amp;self, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this filter that a span with the given ID was entered. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_enter\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#581\">source</a><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_exit\" class=\"fn\">on_exit</a>(&amp;self, id: &amp;<a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this filter that a span with the given ID was exited. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_exit\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tracing_subscriber/filter/layer_filters/mod.rs.html#588\">source</a><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_close\" class=\"fn\">on_close</a>(&amp;self, id: <a class=\"struct\" href=\"tracing_core/span/struct.Id.html\" title=\"struct tracing_core::span::Id\">Id</a>, ctx: <a class=\"struct\" href=\"tracing_subscriber/layer/context/struct.Context.html\" title=\"struct tracing_subscriber::layer::context::Context\">Context</a>&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this filter that a span with the given ID has been closed. <a href=\"tracing_subscriber/layer/trait.Filter.html#method.on_close\">Read more</a></div></details></div></details>","Filter<S>","reth_db::abstraction::common::IterPairResult"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sharded_slab/clear.rs.html#29\">source</a><a href=\"#impl-Clear-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sharded_slab/clear.rs.html#30\">source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","reth_db::abstraction::common::IterPairResult"]],
"reth_mdbx_sys":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/82901\">#82901</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/98934\">#98934</a>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/70086\">#70086</a>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/paradigmxyz/reth/issues/84277\">#84277</a>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","reth_mdbx_sys::MDBX_debug_func","reth_mdbx_sys::MDBX_assert_func","reth_mdbx_sys::MDBX_cmp_func","reth_mdbx_sys::MDBX_preserve_func","reth_mdbx_sys::MDBX_reader_list_func","reth_mdbx_sys::MDBX_hsr_func","reth_mdbx_sys::MDBX_pgvisitor_func"]],
"secp256k1_sys":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CPtr-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1_sys/lib.rs.html#1071-1085\">source</a><a href=\"#impl-CPtr-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt; <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = &lt;T as <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a>&gt;::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section><section id=\"method.as_mut_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1_sys/lib.rs.html#1073-1078\">source</a><a href=\"#method.as_mut_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_mut_c_ptr\" class=\"fn\">as_mut_c_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a>Self::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section><section id=\"method.as_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1_sys/lib.rs.html#1079-1084\">source</a><a href=\"#method.as_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_c_ptr\" class=\"fn\">as_c_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a>Self::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section></div></details>","CPtr","secp256k1_sys::NonceFn","secp256k1_sys::EcdhHashFn","secp256k1_sys::SchnorrNonceFn","secp256k1_sys::EllswiftEcdhHashFn"]],
"system_configuration_sys":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","system_configuration_sys::dynamic_store::SCDynamicStoreCallBack","system_configuration_sys::network_configuration::SCNetworkConnectionCallBack","system_configuration_sys::network_reachability::SCNetworkReachabilityCallBack","system_configuration_sys::preferences::SCPreferencesCallBack"]],
"url":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3C%26T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1840\">source</a><a href=\"#impl-Option%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.copied\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0, const unstable\">1.35.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1856-1858\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.copied\" class=\"fn\">copied</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents of the\noption.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>copied = opt_x.copied();\n<span class=\"macro\">assert_eq!</span>(copied, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cloned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1882-1884\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.cloned\" class=\"fn\">cloned</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents of the\noption.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">12</span>;\n<span class=\"kw\">let </span>opt_x = <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(opt_x, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"kw\">let </span>cloned = opt_x.cloned();\n<span class=\"macro\">assert_eq!</span>(cloned, <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));</code></pre></div>\n</div></details></div></details>",0,"url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","url::EncodingOverride"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","url::EncodingOverride"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","url::EncodingOverride"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2094\">source</a></span><a href=\"#impl-From%3C%26Option%3CT%3E%3E-for-Option%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2115\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(o: &amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Converts an <code><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> into an <code><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, preserving\nthe original. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value, consuming the original,\nso this technique uses <code>from</code> to first take an <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> to a reference\nto the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, Rustaceans!\"</span>));\n<span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = Option::from(<span class=\"kw-2\">&amp;</span>s).map(|ss: <span class=\"kw-2\">&amp;</span>String| ss.len());\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Can still print s: {s:?}\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(o, <span class=\"prelude-val\">Some</span>(<span class=\"number\">18</span>));</code></pre></div>\n</div></details></div></details>","From<&'a Option<T>>","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","url::EncodingOverride"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","url::EncodingOverride"]],
"zstd_sys":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2143\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2398\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2460\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#1996-1998\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2009\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2034\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2052\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2145\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2147\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2488\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2490\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2498\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2500\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2078\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2469\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2474\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2479\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/nightly/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2018\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/option.rs.html#2028\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","zstd_sys::ZSTD_allocFunction","zstd_sys::ZSTD_freeFunction","zstd_sys::ZSTD_sequenceProducer_F"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()